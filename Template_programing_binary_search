#if 1
#include<iostream>
#include<vector>
using namespace std;

//template Binary_search

template<class T>
bool binary_search(T* st,T* end,T val) {
	int mid = (end - st) /2;
	if (mid < 0)
		return false;
	if (*(st + mid) == val)
		return true;
	if (*(st + mid) > val)
		return	binary_search(st, st + mid - 1, val);
	return	binary_search( st + mid + 1,end, val);
 };

template<>
bool binary_search(string* st, string* end, string val) {
	int mid = (end - st) / 2;
	if (mid < 0)
		return false;
	if (*(st + mid) == val)
		return true;
	if (*(st + mid) > val)
		return	binary_search(st, st + mid - 1, val);
	return	binary_search(st + mid + 1, end, val);
};

template<class Itre,class T>
bool binary_search(Itre st,Itre end, T val) {
	int mid = (end - st) / 2;
	if (mid < 0)
		return false;
	if (*(st + mid) == val)
		return true;
	if (*(st + mid) > val)
		return	binary_search(st, st + mid - 1, val);
	return	binary_search(st + mid + 1, end, val);
};

template<class Container ,class T>
bool binary_search(Container c, T val)
{
	
	if (find(c.begin(),c.end(),val) != c.end())
		return true;
	return false;
}
int main()
{
	vector<string>vec;
	for (int i = 0; i < 10; i++)
		vec.push_back("AAv");
	//vector<int>::iterator it;
	//it = vec.begin();
	string str = "AAv";
	cout<< binary_search(&vec[0], &vec[0] +vec.size()-1, str);
	cout << binary_search(vec.begin(), vec.end(), str);
	cout << binary_search(vec, str);
	return 0;
}
#endif
